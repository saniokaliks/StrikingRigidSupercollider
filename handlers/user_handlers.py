from states import Register
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from data.auction_data import auction, save_auction
from aiogram.filters import Command

from config import ADMINS
from keyboards import main_menu
from database import load_users, save_users
from datetime import datetime, timedelta

router = Router()
from handlers.data.utils.storage import users


    # –°—Ç–∞–Ω–∏ FSM
class WithdrawState(StatesGroup):
        waiting_for_amount = State()


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)

    if user_id in users:
        await message.answer("‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!", reply_markup=main_menu)
        return

    # –°–ø–æ—á–∞—Ç–∫—É –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await message.answer("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ RePhrase TEAM! –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ —Å–≤–æ—ó–º –±–∞–ª–∞–Ω—Å–æ–º, –±–æ–Ω—É—Å–∞–º–∏ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —ñ–Ω—à–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.")

    # –ü–æ—Ç—ñ–º –ø—Ä–æ—Ö–∞–Ω–Ω—è –≤–≤–µ—Å—Ç–∏ –ø–æ–∑–∏–≤–Ω–∏–π
    await message.answer("üëã –í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –ø–æ–∑–∏–≤–Ω–∏–π:")
    await state.set_state(Register.nickname)

# ‚ùóÔ∏è –í–ò–ù–ï–°–ï–ù–û –ó-–ü–Ü–î start()
@router.message(Register.nickname)
async def register_nickname(msg: Message, state: FSMContext):
        nickname = msg.text.strip()

        if not (2 <= len(nickname) <= 20):
            await msg.answer("‚ùó –í–∞—à –ø–æ–∑–∏–≤–Ω–∏–π –Ω–µ–≤—ñ—Ä–Ω–∏–π. –í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥ 2 –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return

        uid = str(msg.from_user.id)

        if uid in users:
            await msg.answer("‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
            await state.clear()
            return

        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        users[uid] = {
            "nickname": nickname,
            "bonus": 500,
            "normal": 0,
            "history": [],
            "last_withdrawal": None,
            "banned": False,
            "frozen": {}
        }
        save_users(users)

        total_users = len(users)

        for admin_id in ADMINS:
            await msg.bot.send_message(
                admin_id,
                f"üÜï –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\n"
                f"–ü–æ–∑–∏–≤–Ω–∏–π: {nickname}\n"
                f"ID: {uid}\n"
                f"–ó–∞–≥–∞–ª–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
                f"üéÅ –ë–æ–Ω—É—Å –≤–∏–¥–∞–Ω–æ: 500 –º–æ–Ω–µ—Ç"
            )

        await msg.answer("‚úÖ –ü–æ–∑–∏–≤–Ω–∏–π –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ 500 –±–æ–Ω—É—Å–Ω–∏—Ö –º–æ–Ω–µ—Ç.", reply_markup=main_menu)
        await state.clear()



# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–Ω—É
@router.message(F.text.in_(["üíº –ë–∞–ª–∞–Ω—Å", "üì§ –ó–Ω—è—Ç—Ç—è"]))
async def handle_main_options(message: Message, state: FSMContext, bot: Bot):
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if not user:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
        return

    if user.get("banned"):
        await message.answer("üö´ –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º.")
        return

    if message.text == "üíº –ë–∞–ª–∞–Ω—Å":
        await message.answer(
            f"üíº –ë–∞–ª–∞–Ω—Å:\n"
            f"–ü–æ–∑–∏–≤–Ω–∏–π: {user['nickname']}\n"
            f"ID: {user_id}\n"
            f"üéÅ –ë–æ–Ω—É—Å–Ω—ñ –º–æ–Ω–µ—Ç–∏: {user['bonus']}\n"
            f"üí∞ –ó–≤–∏—á–∞–π–Ω—ñ –º–æ–Ω–µ—Ç–∏: {user['normal']}"
        )

    elif message.text == "üì§ –ó–Ω—è—Ç—Ç—è":
        pending = user.get("pending_withdrawal")
        if pending:
            last_time = datetime.fromisoformat(pending["requested_at"])
            if datetime.now() - last_time < timedelta(days=1):
                await message.answer("‚ùó –í–∏ –≤–∂–µ –∑—Ä–æ–±–∏–ª–∏ –∑–∞–ø–∏—Ç –Ω–∞ –∑–Ω—è—Ç—Ç—è —Å—å–æ–≥–æ–¥–Ω—ñ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
                return
        else:
            last_time_str = user.get("last_withdrawal_time")
            if last_time_str:
                last_time = datetime.fromisoformat(last_time_str)
                if datetime.now() - last_time < timedelta(days=1):
                    await message.answer("‚ùó –í–∏ –≤–∂–µ —Ä–æ–±–∏–ª–∏ –∑–Ω—è—Ç—Ç—è —Å—å–æ–≥–æ–¥–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
                    return

        await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –∑–Ω—è—Ç—Ç—è (–≤—ñ–¥ 3000 –¥–æ 15000):")
        await state.set_state(WithdrawState.waiting_for_amount)


# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ—ó —Å—É–º–∏ –Ω–∞ –∑–Ω—è—Ç—Ç—è
@router.message(WithdrawState.waiting_for_amount, F.text)
async def process_withdraw_amount(message: Message, state: FSMContext, bot: Bot):
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    text = message.text.strip()

    if not text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–≤—ñ–¥ 3000 –¥–æ 15000).")
        await state.clear()
        return

    amount = int(text)

    if amount < 3000 or amount > 15000:
        await message.answer("‚ùó –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö –≤—ñ–¥ 3000 –¥–æ 15000.")
        await state.clear()
        return

    if user["normal"] < amount:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–≤–∏—á–∞–π–Ω–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∑–Ω—è—Ç—Ç—è.")
        await state.clear()
        return

    # üí∞ –í–Ü–î–ù–Ü–ú–ê–Ñ–ú–û –ú–û–ù–ï–¢–ò –ó–Ü –ó–í–ò–ß–ê–ô–ù–û–ì–û –ë–ê–õ–ê–ù–°–£
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –∑–Ω—è—Ç—Ç—è, –∞–ª–µ –Ω–µ –∑–Ω—ñ–º–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
    user["pending_withdrawal"] = {
        "amount": amount,
        "requested_at": datetime.now().isoformat()
    }
    save_users(users)


    uah = amount / 3
    await message.answer(
        f"‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –ó–∞–∑–≤–∏—á–∞–π –æ–±—Ä–æ–±–∫–∞ –∑–∞–π–º–∞—î –¥–æ 24 –≥–æ–¥–∏–Ω.–î—è–∫—É—î–º–æ –∑–∞ —Ç–µ—Ä–ø—ñ–Ω–Ω—è!.\n"
        f"üí∏ –ü—Ä–∏–±–ª–∏–∑–Ω–∞ —Å—É–º–∞: {uah:.2f} –≥—Ä–Ω."
    )
    await state.clear()

    for admin_id in ADMINS:
        await bot.send_message(
            admin_id,
            f"üì§ –ó–∞–ø–∏—Ç –Ω–∞ –∑–Ω—è—Ç—Ç—è:\n"
            f"–ü–æ–∑–∏–≤–Ω–∏–π: {user['nickname']}\n"
            f"ID: {user_id}\n"
            f"–°—É–º–∞: {amount} –º–æ–Ω–µ—Ç ‚âà {uah:.2f} –≥—Ä–Ω.\n"
            f"‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ / ‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
            reply_markup=build_admin_withdraw_buttons(user_id, amount)
        )



# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞ (–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def build_admin_withdraw_buttons(user_id: str, amount: int):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"accept:{user_id}:{amount}"),
            InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"decline:{user_id}:{amount}")
        ]
    ])
    return markup
@router.message(F.text == "üìú –Ü—Å—Ç–æ—Ä—ñ—è")
async def show_history(message: Message):
    user_id = str(message.from_user.id)
    user = users.get(user_id)

    if not user:
        await message.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return

    if user.get("banned"):
        await message.answer("üö´ –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ.")
        return

    history = user.get("history", [])
    if not history:
        await message.answer("üìú –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –≤–∏–≤–µ–¥–µ–Ω–Ω—è.")
    else:
        await message.answer("üìú –Ü—Å—Ç–æ—Ä—ñ—è –≤–∏–≤–æ–¥—ñ–≤:\n" + "\n".join(history))
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup

class ShopState(StatesGroup):
    choosing_service = State()
    choosing_wallet = State()
    entering_book_title = State()
SERVICES = {
    1: ("–í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó [3 –≥–æ–¥–∏–Ω–∏]", 55),
    2: ("–í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó [12 –≥–æ–¥–∏–Ω]", 200),
    3: ("–í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó [24 –≥–æ–¥–∏–Ω–∏]", 350),
    4: ("–ù–∞ –≥–æ–ª–æ–≤–Ω—ñ–π [3 –≥–æ–¥–∏–Ω–∏]", 250),
    5: ("–ù–∞ –≥–æ–ª–æ–≤–Ω—ñ–π [12 –≥–æ–¥–∏–Ω]", 1000),
    6: ("–ù–∞ –≥–æ–ª–æ–≤–Ω—ñ–π [24 –≥–æ–¥–∏–Ω–∏]", 2000),
    7: ("–í –∫–∞—Ç–∞–ª–æ–∑—ñ [24 –≥–æ–¥–∏–Ω–∏]", 350),
    8: ("–ó–∞ –∂–∞–Ω—Ä–∞–º–∏ [24 –≥–æ–¥–∏–Ω–∏]", 150),
    9: ("–ó–∞ —Ç–µ–≥–∞–º–∏ [24 –≥–æ–¥–∏–Ω–∏]", 100),
    10: ("–ó–∞ —Ñe–Ω–¥–æ–º–∞–º–∏ [24 –≥–æ–¥–∏–Ω–∏]", 150),
    11: ("–í—Å—è —Ä–µ–∫–ª–∞–º–∞ –Ω–∞ [24 –≥–æ–¥–∏–Ω–∏]", 2800),
    12: ("–í —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö [24 –≥–æ–¥–∏–Ω–∏]", 2000),
    13: ("–û–∑–≤—É—á–∫–∞ –∫–Ω–∏–≥–∏ [1 —Ä–æ–∑–¥—ñ–ª]", 300),
    14: ("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞—Å—Ç–∞–≤–∫–∏ [1 —Ñ–æ—Ç–æ]", 300),
    15: ("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è [1 —Ä–æ–∑–¥—ñ–ª]", 200),
    16: ("–í–∏–ø—É—Å–∫ [1 —Ä–æ–∑–¥—ñ–ª]", 300),
    17: ("–í–∏–ø—É—Å–∫ [5 —Ä–æ–∑–¥—ñ–ª]", 1000),
}
@router.message(F.text == "üõç –ú–∞–≥–∞–∑–∏–Ω")
async def open_shop(message: Message, state: FSMContext):
    if users.get(str(message.from_user.id), {}).get("banned"):
        await message.answer("üö´ –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —Ç–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –º–∞–≥–∞–∑–∏–Ω–æ–º.")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{key}: {name} - {price} –º–æ–Ω–µ—Ç", callback_data=f"shop:{key}")]
        
        for key, (name, price) in SERVICES.items()
    ])
    await message.answer("üõç –û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:", reply_markup=kb)
    await state.set_state(ShopState.choosing_service)
@router.callback_query(ShopState.choosing_service, F.data.startswith("shop:"))
async def select_service(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split(":")[1])
    service_name, price = SERVICES[service_id]

    await state.update_data(service_id=service_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å–Ω–∏–π –±–∞–ª–∞–Ω—Å", callback_data="wallet:bonus"),
            InlineKeyboardButton(text="üí∞ –ó–≤–∏—á–∞–π–Ω–∏–π –±–∞–ª–∞–Ω—Å", callback_data="wallet:normal")
        ]
    ])
    await callback.message.edit_text(f"üîÑ –í–∏ –æ–±—Ä–∞–ª–∏: {service_name}.\nüí≥ –ó —è–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å—É —Å–ø–ª–∞—Ç–∏—Ç–∏?", reply_markup=kb)
    await state.set_state(ShopState.choosing_wallet)
@router.callback_query(ShopState.choosing_wallet, F.data.startswith("wallet:"))
async def choose_wallet(callback: CallbackQuery, state: FSMContext):
    wallet_type = callback.data.split(":")[1]
    await state.update_data(wallet=wallet_type)
    await callback.message.edit_text("üìò –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏:")
    await state.set_state(ShopState.entering_book_title)
@router.message(ShopState.entering_book_title)
async def enter_book_title(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    service_id = data["service_id"]
    wallet_type = data["wallet"]
    book_title = message.text.strip()

    service_name, price = SERVICES[service_id]
    user_id = str(message.from_user.id)
    user = users[user_id]

    balance = user[wallet_type]
    if balance < price:
        await message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ.")
        await state.clear()
        return

    user[wallet_type] -= price
    user.setdefault("purchases", []).append({
        "service": service_name,
        "book": book_title,
        "wallet": "üéÅ –ë–æ–Ω—É—Å–Ω–∏–π" if wallet_type == "bonus" else "üí∞ –ó–≤–∏—á–∞–π–Ω–∏–π",
        "price": price
    })
    save_users(users)

    await message.answer(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –ü–æ—Å–ª—É–≥–∞: {service_name}\nüìò –ö–Ω–∏–≥–∞: {book_title}")
    await state.clear()

    for admin_id in ADMINS:
        await bot.send_message(
            admin_id,
            f"üì• –ù–æ–≤–∞ –ø–æ–∫—É–ø–∫–∞ –ø–æ—Å–ª—É–≥–∏:\n"
            f"ID: {user_id}\n"
            f"–ü–æ–∑–∏–≤–Ω–∏–π: {user['nickname']}\n"
            f"–ü–æ—Å–ª—É–≥–∞: {service_name}\n"
            f"–ë–∞–ª–∞–Ω—Å: {wallet_type.upper()}\n"
            f"–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏: {book_title}\n"
            f"–°–ø–∏—Å–∞–Ω–æ: {price} –º–æ–Ω–µ—Ç"
        )
@router.message(F.text == "üìò –ü–æ–∫—É–ø–∫–∏")
async def show_purchases(message: Message):
    user_id = str(message.from_user.id)
    user = users.get(user_id)
    if users.get(str(message.from_user.id), {}).get("banned"):
        await message.answer("üö´ –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —Ç–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —Ü–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.")
        return


    if not user:
        await message.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    purchases = user.get("purchases", [])
    if not purchases:
        await message.answer("üìò –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–æ–∫—É–ø–æ–∫.")
        return

    history_text = "\n\n".join([f"üì¶ {p['service']}\nüìò {p['book']}\nüí≥ {p['wallet']} - {p['price']} –º–æ–Ω–µ—Ç" for p in purchases])
    await message.answer(f"üìò –í–∞—à—ñ –ø–æ–∫—É–ø–∫–∏:\n\n{history_text}")

@router.message(F.text == "üèÜ –ê—É–∫—Ü—ñ–æ–Ω")
async def open_auction(message: Message):
    if users.get(str(message.from_user.id), {}).get("banned"):
        await message.answer("üö´ –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —Ç–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —Ü–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.")
        return

    if not auction:
        await message.answer("üìö –ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞—É–∫—Ü—ñ–æ–Ω—ñ–≤.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{book_id}", callback_data=f"auction:{book_id}")]
        for book_id in auction
    ])
    await message.answer("üìò –û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞—É–∫—Ü—ñ–æ–Ω—É:", reply_markup=kb)

from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@router.callback_query(F.data.startswith("auction:"))
async def view_auction(callback: CallbackQuery):
    book_id = callback.data.split(":")[1]
    data = auction[book_id]
    desc = data['description']
    bid = data['highest_bid']
    user = data['highest_user']

    # ‚è≥ –û–±—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É
    remaining = "‚Äî"
    end_time_str = data.get("end_time")
    if end_time_str:
        end_time = datetime.fromisoformat(end_time_str)
        delta = end_time - datetime.now()

        if delta.total_seconds() > 0:
            minutes = delta.seconds // 60
            seconds = delta.seconds % 60
            remaining = f"{minutes} —Ö–≤ {seconds} —Å–µ–∫"
        else:
            remaining = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"

    text = (
        f"üìñ –ö–Ω–∏–≥–∞: {book_id}\n"
        f"üìÑ –û–ø–∏—Å: {desc}\n"
        f"üí∞ –ù–∞–π–≤–∏—â–∞ —Å—Ç–∞–≤–∫–∞: {bid if bid > 0 else '‚Äî'}\n"
        f"üîª –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞: {data['min_bid']}\n"
        f"‚è≥ –ß–∞—Å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {remaining}"
    )

    btn = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –ó—Ä–æ–±–∏—Ç–∏ —Å—Ç–∞–≤–∫—É", callback_data=f"bid:{book_id}")]
    ])

    await callback.message.edit_text(text, reply_markup=btn)

class BidState(StatesGroup):
    choosing_balance = State()
    entering_amount = State()

@router.callback_query(F.data.startswith("bid:"))
async def start_bid(callback: CallbackQuery, state: FSMContext):
    book_id = callback.data.split(":")[1]
    await state.update_data(book_id=book_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å–Ω–∏–π", callback_data="bid_wallet:bonus"),
            InlineKeyboardButton(text="üí∞ –ó–≤–∏—á–∞–π–Ω–∏–π", callback_data="bid_wallet:normal")
        ]
    ])
    await callback.message.edit_text("üí≥ –û–±–µ—Ä—ñ—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è —Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
    await state.set_state(BidState.choosing_balance)

@router.callback_query(BidState.choosing_balance, F.data.startswith("bid_wallet:"))
async def bid_balance(callback: CallbackQuery, state: FSMContext):
    wallet = callback.data.split(":")[1]
    await state.update_data(wallet=wallet)
    await callback.message.edit_text("üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Å—Ç–∞–≤–∫–∏:")
    await state.set_state(BidState.entering_amount)
@router.message(BidState.entering_amount)
async def process_bid(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    book_id = data["book_id"]
    wallet = data["wallet"]
    user_id = str(message.from_user.id)
    user = users[user_id]
    bid = int(message.text.strip())

    min_bid = auction[book_id]["min_bid"]
    current_bid = auction[book_id]["highest_bid"]

    if bid < min_bid:
        await message.answer(f"‚ùó –°—Ç–∞–≤–∫–∞ –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ {min_bid} –º–æ–Ω–µ—Ç.")
        return

    if bid <= current_bid:
        await message.answer(f"‚ùó –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –ø–æ—Ç–æ—á–Ω—É ({current_bid} –º–æ–Ω–µ—Ç).")
        return

    if user[wallet] < bid:
        await message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç.")
        return

    prev_user = auction[book_id]["highest_user"]
    prev_bid = auction[book_id]["highest_bid"]
    prev_wallet = auction[book_id].get("highest_wallet")

    if prev_user == user_id:
        await message.answer("‚ùó –í–∏ –≤–∂–µ —î –ª—ñ–¥–µ—Ä–æ–º.")
        return

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–Ω–µ—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É
    if prev_user and prev_wallet:
        users[prev_user][prev_wallet] += prev_bid
        await bot.send_message(prev_user, f"‚ö†Ô∏è –í–∞—à—É —Å—Ç–∞–≤–∫—É –ø–µ—Ä–µ–±–∏–ª–∏ –≤ –∫–Ω–∏–∑—ñ '{book_id}'.")

    # –ó–∞–º–æ—Ä–æ–∂—É—î–º–æ –Ω–æ–≤—É —Å—Ç–∞–≤–∫—É
    user[wallet] -= bid
    auction[book_id]["highest_user"] = user_id
    auction[book_id]["highest_bid"] = bid
    auction[book_id]["highest_wallet"] = wallet

    save_users(users)
    save_auction(auction)

    await message.answer(f"‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {bid} –º–æ–Ω–µ—Ç –ø—Ä–∏–π–Ω—è—Ç–∞!")
    await state.clear()
