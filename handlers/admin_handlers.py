from aiogram import Router, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from data.auction_data import auction, save_auction
from database import load_users, save_users
from config import ADMINS
from handlers.data.utils.storage import users
from datetime import datetime
router = Router()

def is_admin(user_id: int | str) -> bool:
  return str(user_id) in ADMINS

### --- Callbacks --- ###

@router.callback_query(F.data.startswith("accept:"))
async def accept_withdrawal(callback: CallbackQuery):
            parts = callback.data.split(":")
            user_id, amount = parts[1], int(parts[2])
            user = users.get(user_id)

            if not user:
                await callback.message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            # üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å
            if user.get("last_withdrawal") != amount:
                await callback.message.answer("‚ö†Ô∏è –¶—é –∑–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
                return

            # –ó–Ω—ñ–º–∞—î–º–æ –∑–∞—è–≤–∫—É
            user["last_withdrawal"] = None
            now = datetime.now().strftime("%d.%m.%Y")
            user["history"].append(f"üíµ {now} | –∑–Ω—è—Ç—Ç—è: {amount} –º–æ–Ω–µ—Ç")
            save_users(users)

            await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤—ñ–¥ {amount} –º–æ–Ω–µ—Ç –¥–ª—è ID {user_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")
            try:
                await callback.bot.send_message(int(user_id), f"‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∑–Ω—è—Ç—Ç—è {amount} –º–æ–Ω–µ—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.–ì—Ä–æ—à—ñ –Ω–∞–¥—ñ–π–¥—É—Ç—å –¥–æ –≤–∞—Å –ø—Ä–æ—Ç—è–≥–æ–º 15 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤ ‚Äî –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç—Ä–æ—Ö–∏ –ø–æ—á–µ–∫–∞—Ç–∏.")
            except:
                pass


@router.callback_query(F.data.startswith("decline:"))
async def decline_withdrawal(callback: CallbackQuery):
            parts = callback.data.split(":")
            user_id, amount = parts[1], int(parts[2])
            user = users.get(user_id)

            if not user:
                await callback.message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            # üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å
            if user.get("last_withdrawal") != amount:
                await callback.message.answer("‚ö†Ô∏è –¶—é –∑–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
                return

            # –°–∫–∞—Å–æ–≤—É—î–º–æ –∑–∞—è–≤–∫—É, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
            user["normal"] += amount
            user["last_withdrawal"] = None
            user["history"].append(f"‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ –∑–Ω—è—Ç—Ç—è: {amount} –º–æ–Ω–µ—Ç")
            save_users(users)

            await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤—ñ–¥ {amount} –º–æ–Ω–µ—Ç –¥–ª—è ID {user_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞. –ú–æ–Ω–µ—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ.")
            try:
                await callback.bot.send_message(
                    int(user_id),
                    f"‚ùå –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∑–Ω—è—Ç—Ç—è {amount} –º–æ–Ω–µ—Ç –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\nüí∞ –ú–æ–Ω–µ—Ç–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ –±–∞–ª–∞–Ω—Å."
                )
            except:
                pass


### --- –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ --- ###

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ê —Ç–∏ —à–∞–ª—É–Ω!.")
        return

    await message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/give_bonus user_id —Å—É–º–∞ ‚Äì –≤–∏–¥–∞—Ç–∏ –±–æ–Ω—É—Å–Ω—ñ –º–æ–Ω–µ—Ç–∏\n"
        "/give_normal user_id —Å—É–º–∞ ‚Äì –≤–∏–¥–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω—ñ –º–æ–Ω–µ—Ç–∏\n"
        "/take_bonus user_id —Å—É–º–∞ ‚Äì –∑–∞–±—Ä–∞—Ç–∏ –±–æ–Ω—É—Å–Ω—ñ –º–æ–Ω–µ—Ç–∏\n"
        "/take_normal user_id —Å—É–º–∞ ‚Äì –∑–∞–±—Ä–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω—ñ –º–æ–Ω–µ—Ç–∏\n"
        "/user_balance user_id ‚Äì –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/ban user_id ‚Äì –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "/unban user_id ‚Äì —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "/list_banned ‚Äì —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–∏—Ö\n"
        "/add_auction book_id –æ–ø–∏—Å ‚Äì –¥–æ–¥–∞—Ç–∏ –∞—É–∫—Ü—ñ–æ–Ω\n"
        "/remove_auction book_id ‚Äì –≤–∏–¥–∞–ª–∏—Ç–∏ –∞—É–∫—Ü—ñ–æ–Ω\n"
        "/create_auction book_id –º—ñ–Ω_—Å—Ç–∞–≤–∫–∞ –æ–ø–∏—Å ‚Äì —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞—É–∫—Ü—ñ–æ–Ω\n"
        "/finish_auction book_id ‚Äì –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∞—É–∫—Ü—ñ–æ–Ω\n"
        "/users ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ\n"
        "/reset_all ‚Äì –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ\n"
    )

@router.message(Command("give_bonus"))
async def give_bonus(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –®–ê–•–†–ê–ô !!!.") 
        return
    try:
        _, user_id, amount = message.text.split()
        users[user_id]["bonus"] += int(amount)
        save_users(users)
        await message.answer(f"‚úÖ –í–∏–¥–∞–Ω–æ {amount} –±–æ–Ω—É—Å–Ω–∏—Ö –º–æ–Ω–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
    except:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. /give_bonus user_id —Å—É–º–∞")

@router.message(Command("give_normal"))
async def give_normal(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –®–ê–•–†–ê–ô !!!.") 
        return
    try:
        _, user_id, amount = message.text.split()
        users[user_id]["normal"] += int(amount)
        save_users(users)
        await message.answer(f"‚úÖ –í–∏–¥–∞–Ω–æ {amount} –∑–≤–∏—á–∞–π–Ω–∏—Ö –º–æ–Ω–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
    except:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. /give_normal user_id —Å—É–º–∞")

@router.message(Command("take_bonus"))
async def take_bonus(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –®–ê–•–†–ê–ô !!!.") 
        return
    try:
        _, user_id, amount = message.text.split()
        users[user_id]["bonus"] -= int(amount)
        save_users(users)
        await message.answer(f"‚úÖ –ó–∞–±—Ä–∞–Ω–æ {amount} –±–æ–Ω—É—Å–Ω–∏—Ö –º–æ–Ω–µ—Ç —É {user_id}")
    except:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞.")

@router.message(Command("take_normal"))
async def take_normal(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –®–ê–•–†–ê–ô !!!.") 
        return
    try:
        _, user_id, amount = message.text.split()
        users[user_id]["normal"] -= int(amount)
        save_users(users)
        await message.answer(f"‚úÖ –ó–∞–±—Ä–∞–Ω–æ {amount} –∑–≤–∏—á–∞–π–Ω–∏—Ö –º–æ–Ω–µ—Ç —É {user_id}")
    except:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞.")

@router.message(Command("user_balance"))
async def user_balance(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –®–ê–•–†–ê–ô !!!.") 
        return
    try:
        _, user_id = message.text.split()
        u = users[user_id]
        await message.answer(f"üë§ ID: {user_id}\n–ü–æ–∑–∏–≤–Ω–∏–π: {u['nickname']}\nüéÅ –ë–æ–Ω—É—Å: {u['bonus']}\nüí∞ –ó–≤–∏—á–∞–π–Ω—ñ: {u['normal']}")
    except:
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@router.message(Command("ban"))
async def ban_user(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –®–ê–•–†–ê–ô !!!.") 
        return
    try:
        _, user_id = message.text.split()
        users[user_id]["banned"] = True
        save_users(users)
        await message.answer(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
    except:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞.")

@router.message(Command("unban"))
async def unban_user(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –®–ê–•–†–ê–ô !!!.") 
        return
    try:
        _, user_id = message.text.split()
        users[user_id]["banned"] = False
        save_users(users)
        await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
    except:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞.")

@router.message(Command("list_banned"))
async def list_banned(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –®–ê–•–†–ê–ô!.")
        return
    banned = [f"{uid} - {u['nickname']}" for uid, u in users.items() if u.get("banned")]
    if not banned:
        await message.answer("‚úÖ –ù–µ–º–∞—î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
    else:
        await message.answer("üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n" + "\n".join(banned))

### --- –ê—É–∫—Ü—ñ–æ–Ω–∏ --- ###

@router.message(Command("create_auction"))
async def create_auction(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –®–ê–•–†–ê–ô!.")
        return

    try:
        _, book_id, min_bid, *desc = message.text.split()
        description = " ".join(desc)
        auction[book_id] = {
            "description": description,
            "highest_bid": 0,
            "highest_user": None,
            "min_bid": int(min_bid),
            "highest_wallet": None
        }
        save_auction(auction)
        await message.answer(f"‚úÖ –ê—É–∫—Ü—ñ–æ–Ω '{book_id}' —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é —Å—Ç–∞–≤–∫–æ—é {min_bid}")
    except:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /create_auction <book_id> <min_bid> <–æ–ø–∏—Å>")

@router.message(Command("add_auction"))
async def add_auction_book(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –®–ê–•–†–ê–ô!.")
        return
    try:
        _, book_id, *desc = message.text.split()
        description = " ".join(desc)
        if book_id in auction:
            await message.answer("‚ùó –¶—è –∫–Ω–∏–≥–∞ –≤–∂–µ –≤ –∞—É–∫—Ü—ñ–æ–Ω—ñ.")
            return
        auction[book_id] = {
            "description": description,
            "min_bid": 200,
            "highest_bid": 0,
            "highest_user": None,
            "frozen": {}
        }
        save_auction(auction)
        await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ –∫–Ω–∏–≥—É {book_id} –¥–æ –∞—É–∫—Ü—ñ–æ–Ω—É.")
    except:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /add_auction book_id –æ–ø–∏—Å")

@router.message(Command("remove_auction"))
async def remove_auction_book(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –®–ê–•–†–ê–ô!.")
        return
    try:
        _, book_id = message.text.split()
        if book_id in auction:
            auction.pop(book_id)
            save_auction(auction)
            await message.answer(f"üóë –ö–Ω–∏–≥–∞ {book_id} –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ –∞—É–∫—Ü—ñ–æ–Ω—É.")
        else:
            await message.answer("‚ùó –ö–Ω–∏–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    except:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /remove_auction book_id")

@router.message(Command("finish_auction"))
async def finish_auction(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –®–ê–•–†–ê–ô!.")
        return
    bot = message.bot
    parts = message.text.strip().split()

    if len(parts) != 2:
        await message.answer("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /finish_auction <book_id>")
        return

    book_id = parts[1]

    if book_id not in auction:
        await message.answer("‚ùå –ê—É–∫—Ü—ñ–æ–Ω –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    data = auction.pop(book_id)
    save_auction(auction)

    bid = data['highest_bid']
    winner_id = data['highest_user']
    book_desc = data.get('description', "‚Äî")

    if winner_id:
        nickname = users.get(winner_id, {}).get("nickname", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
        try:
            await bot.send_message(
                winner_id,
                f"üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü—ñ–æ–Ω –Ω–∞ –∫–Ω–∏–≥—É '{book_id}'!\n"
                f"üìñ –û–ø–∏—Å: {book_desc}\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: {bid} –º–æ–Ω–µ—Ç"
            )
        except:
            pass

        for admin_id in ADMINS:
            await bot.send_message(
                admin_id,
                f"üèÅ –ê—É–∫—Ü—ñ–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                f"üìö –ö–Ω–∏–≥–∞: {book_id}\n"
                f"üìÑ –û–ø–∏—Å: {book_desc}\n"
                f"üë§ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {nickname} (ID: {winner_id})\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: {bid} –º–æ–Ω–µ—Ç"
            )

        await message.answer("‚úÖ –ê—É–∫—Ü—ñ–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–º–æ–∂—Ü—è —Å–ø–æ–≤—ñ—â–µ–Ω–æ.")
    else:
        for admin_id in ADMINS:
            await bot.send_message(
                admin_id,
                f"‚ö†Ô∏è –ê—É–∫—Ü—ñ–æ–Ω '{book_id}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ –ø–µ—Ä–µ–º–æ–∂—Ü—è."
            )
        await message.answer("‚ö†Ô∏è –ê—É–∫—Ü—ñ–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–µ –±—É–ª–æ —Å—Ç–∞–≤–æ–∫.")

@router.message(Command("auction_list"))
async def list_auctions(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –®–ê–•–†–ê–ô!.")
        return
    if not auction:
        await message.answer("üìö –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞—É–∫—Ü—ñ–æ–Ω—ñ–≤ –Ω–µ–º–∞—î.")
        return

    result = "üìö –ê–∫—Ç–∏–≤–Ω—ñ –∞—É–∫—Ü—ñ–æ–Ω–∏:\n"
    for book_id in auction:
        result += f"‚Ä¢ {book_id}\n"
    await message.answer(result)

@router.message(Command("reset_all"))
async def reset_all_data(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –®–ê–•–†–ê–ô!.")
        return

    users.clear()
    save_users(users)
    auction.clear()
    save_auction(auction)
    await message.answer("‚ôªÔ∏è –£—Å—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ. –ë–æ—Ç –ø–æ—á–∏–Ω–∞—î –∑ —á–∏—Å—Ç–æ–≥–æ –∞—Ä–∫—É—à–∞.")
@router.message(Command("users"))
async def show_users(message: Message):
        if not is_admin(message.from_user.id):
            return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

        if not users:
            return await message.answer("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

        users_list = "\n\n".join([
            f"üÜî ID: {uid}\n"
            f"üìõ –ü–æ–∑–∏–≤–Ω–∏–π: {u.get('nickname', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}"
            for uid, u in users.items()
        ])

        await message.answer(f"üë• –£—á–∞—Å–Ω–∏–∫–∏ –±–æ—Ç–∞:\n\n{users_list}")

